apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'
apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'speed'
                keyPassword '123456'
                storeFile file('speedjks.jks')
                storePassword '123456'
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    defaultConfig {
        applicationId "com.zhanghao.speed"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode1()
        versionName getVersionName1()
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    flavorDimensions "channel"  //适配安卓studio3.0
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField 'String', 'SERVER_ADDRESS', project.properties['RELEASE_SERVER']
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.releaseConfig
            buildConfigField 'String', 'SERVER_ADDRESS', project.properties['DEBUG_SERVER']
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            outputFileName = "speed${releaseTime()}_${defaultConfig.versionCode}_${defaultConfig.versionName}.apk"
//            if (output.zipAlign != null) {
//                output.zipAlign.doLast {
//                    output.zipAlign.inputFile.delete()
//                }
//            }
//        }
//    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    "speed${defaultConfig.versionName}_${defaultConfig.versionCode}_${releaseTime()}.apk")
            if (output.zipAlign != null) {
                output.zipAlign.doLast {
                    output.zipAlign.inputFile.delete()
                }
            }
        }
    }
//    productFlavors {
//        正式版 {
//            buildConfigField 'String', 'SERVER_ADDRESS', project.properties['RELEASE_SERVER']
//        }
//        测试版 {
//            buildConfigField 'String', 'SERVER_ADDRESS', project.properties['DEBUG_SERVER']
//        }
//    }
}

def getVersionCode1() {
    def versionFile = file('../version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames        //仅在assembleRelease任务是增加版本号
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getVersionName1() {
    def versionFile = file('../version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionName = versionProps['VERSION_NAME']
        return versionName
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':core')
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    // 修改的地方 把annotationProcessor改为apt
}
